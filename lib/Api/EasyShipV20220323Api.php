<?php
/**
 * EasyShipV20220323Api
 * PHP version 7.3
 *
 * @category Class
 * @package  SellingPartnerApi
 */

/**
 * Selling Partner API for Easy Ship
 *
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders. Your Easy Ship applications can: * Get available time slots for packages to be scheduled for delivery. * Schedule, reschedule, and cancel Easy Ship orders. * Print labels, invoices, and warranties. See the [Marketplace Support Table](https://developer-docs.amazon.com/sp-api/docs/easy-ship-api-v2022-03-23-use-case-guide) for the differences in Easy Ship operations by marketplace.
 *
 * The version of the OpenAPI document: 2022-03-23
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SellingPartnerApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SellingPartnerApi\ApiException;
use SellingPartnerApi\Configuration;
use SellingPartnerApi\HeaderSelector;
use SellingPartnerApi\Middlewares\TelescopeMiddleware;
use SellingPartnerApi\ObjectSerializer;

/**
 * EasyShipV20220323Api Class Doc Comment
 *
 * @category Class
 * @package  SellingPartnerApi
 */
class EasyShipV20220323Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param Configuration $config
     * @param ClientInterface $client
     * @param HeaderSelector $selector
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration   $config,
        ClientInterface $client = null,
        HeaderSelector  $selector = null,
                        $hostIndex = 0
    )
    {
        list ($this->client, $this->config, $this->headerSelector, $this->hostIndex) = ClientImpl::getClient($client, $config, $selector, $hostIndex);
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createScheduledPackage
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\CreateScheduledPackageRequest $create_scheduled_package_request create_scheduled_package_request (required)
     *
     * @return \SellingPartnerApi\Model\EasyShipV20220323\Package
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function createScheduledPackage($create_scheduled_package_request)
    {
        $response = $this->createScheduledPackageWithHttpInfo($create_scheduled_package_request);
        return $response;
    }

    /**
     * Operation createScheduledPackageWithHttpInfo
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\CreateScheduledPackageRequest $create_scheduled_package_request (required)
     *
     * @return array of \SellingPartnerApi\Model\EasyShipV20220323\Package, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function createScheduledPackageWithHttpInfo($create_scheduled_package_request)
    {
        $request = $this->createScheduledPackageRequest($create_scheduled_package_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);

            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string)($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\Package' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\Package', $response->getHeaders());
                case 400:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 401:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 403:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 404:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 415:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 429:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 500:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 503:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
            }

            $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Package';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string)$responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createScheduledPackageAsync
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\CreateScheduledPackageRequest $create_scheduled_package_request (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createScheduledPackageAsync($create_scheduled_package_request)
    {
        return $this->createScheduledPackageAsyncWithHttpInfo($create_scheduled_package_request);;
    }

    /**
     * Operation createScheduledPackageAsyncWithHttpInfo
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\CreateScheduledPackageRequest $create_scheduled_package_request (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function createScheduledPackageAsyncWithHttpInfo($create_scheduled_package_request)
    {
        $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Package';
        $request = $this->createScheduledPackageRequest($create_scheduled_package_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string)($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'createScheduledPackage'
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\CreateScheduledPackageRequest $create_scheduled_package_request (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function createScheduledPackageRequest($create_scheduled_package_request)
    {
        // verify the required parameter 'create_scheduled_package_request' is set
        if ($create_scheduled_package_request === null || (is_array($create_scheduled_package_request) && count($create_scheduled_package_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_scheduled_package_request when calling createScheduledPackage'
            );
        }

        $resourcePath = '/easyShip/2022-03-23/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_scheduled_package_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_scheduled_package_request));
            } else {
                $httpBody = $create_scheduled_package_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getScheduledPackage
     *
     * @param string $amazon_order_id An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required)
     * @param string $marketplace_id An identifier for the marketplace in which the seller is selling. (required)
     *
     * @return \SellingPartnerApi\Model\EasyShipV20220323\Package
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function getScheduledPackage($amazon_order_id, $marketplace_id)
    {
        $response = $this->getScheduledPackageWithHttpInfo($amazon_order_id, $marketplace_id);
        return $response;
    }

    /**
     * Operation getScheduledPackageWithHttpInfo
     *
     * @param string $amazon_order_id An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required)
     * @param string $marketplace_id An identifier for the marketplace in which the seller is selling. (required)
     *
     * @return array of \SellingPartnerApi\Model\EasyShipV20220323\Package, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function getScheduledPackageWithHttpInfo($amazon_order_id, $marketplace_id)
    {
        $request = $this->getScheduledPackageRequest($amazon_order_id, $marketplace_id);
        $signedRequest = $this->config->signRequest(
            $request
        );



        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);

            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string)($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\Package' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\Package', $response->getHeaders());
                case 400:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 401:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 403:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 404:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 415:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 429:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 500:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 503:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
            }

            $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Package';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string)$responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\Package',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getScheduledPackageAsync
     *
     *
     *
     * @param string $amazon_order_id An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required)
     * @param string $marketplace_id An identifier for the marketplace in which the seller is selling. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getScheduledPackageAsync($amazon_order_id, $marketplace_id)
    {
        return $this->getScheduledPackageAsyncWithHttpInfo($amazon_order_id, $marketplace_id);;
    }

    /**
     * Operation getScheduledPackageAsyncWithHttpInfo
     *
     *
     *
     * @param string $amazon_order_id An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required)
     * @param string $marketplace_id An identifier for the marketplace in which the seller is selling. (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function getScheduledPackageAsyncWithHttpInfo($amazon_order_id, $marketplace_id)
    {
        $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Package';
        $request = $this->getScheduledPackageRequest($amazon_order_id, $marketplace_id);
        $signedRequest = $this->config->signRequest(
            $request
        );



        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string)($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getScheduledPackage'
     *
     * @param string $amazon_order_id An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship. (required)
     * @param string $marketplace_id An identifier for the marketplace in which the seller is selling. (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function getScheduledPackageRequest($amazon_order_id, $marketplace_id)
    {
        // verify the required parameter 'amazon_order_id' is set
        if ($amazon_order_id === null || (is_array($amazon_order_id) && count($amazon_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $amazon_order_id when calling getScheduledPackage'
            );
        }
        if (strlen($amazon_order_id) > 255) {
            throw new \InvalidArgumentException('invalid length for "$amazon_order_id" when calling EasyShipV20220323Api.getScheduledPackage, must be smaller than or equal to 255.');
        }
        if (strlen($amazon_order_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$amazon_order_id" when calling EasyShipV20220323Api.getScheduledPackage, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'marketplace_id' is set
        if ($marketplace_id === null || (is_array($marketplace_id) && count($marketplace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling getScheduledPackage'
            );
        }
        if (strlen($marketplace_id) > 255) {
            throw new \InvalidArgumentException('invalid length for "$marketplace_id" when calling EasyShipV20220323Api.getScheduledPackage, must be smaller than or equal to 255.');
        }
        if (strlen($marketplace_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$marketplace_id" when calling EasyShipV20220323Api.getScheduledPackage, must be bigger than or equal to 1.');
        }


        $resourcePath = '/easyShip/2022-03-23/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($amazon_order_id)) {
            $amazon_order_id = ObjectSerializer::serializeCollection($amazon_order_id, '', true);
        }
        if ($amazon_order_id !== null) {
            $queryParams['amazonOrderId'] = $amazon_order_id;
        }

        // query params
        if (is_array($marketplace_id)) {
            $marketplace_id = ObjectSerializer::serializeCollection($marketplace_id, '', true);
        }
        if ($marketplace_id !== null) {
            $queryParams['marketplaceId'] = $marketplace_id;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listHandoverSlots
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsRequest $list_handover_slots_request list_handover_slots_request (optional)
     *
     * @return \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function listHandoverSlots($list_handover_slots_request = null)
    {
        $response = $this->listHandoverSlotsWithHttpInfo($list_handover_slots_request);
        return $response;
    }

    /**
     * Operation listHandoverSlotsWithHttpInfo
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsRequest $list_handover_slots_request (optional)
     *
     * @return array of \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function listHandoverSlotsWithHttpInfo($list_handover_slots_request = null)
    {
        $request = $this->listHandoverSlotsRequest($list_handover_slots_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);

            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string)($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse', $response->getHeaders());
                case 400:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 401:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 403:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 404:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 415:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 429:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 500:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 503:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
            }

            $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string)$responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listHandoverSlotsAsync
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsRequest $list_handover_slots_request (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listHandoverSlotsAsync($list_handover_slots_request = null)
    {
        return $this->listHandoverSlotsAsyncWithHttpInfo($list_handover_slots_request);;
    }

    /**
     * Operation listHandoverSlotsAsyncWithHttpInfo
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsRequest $list_handover_slots_request (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function listHandoverSlotsAsyncWithHttpInfo($list_handover_slots_request = null)
    {
        $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsResponse';
        $request = $this->listHandoverSlotsRequest($list_handover_slots_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string)($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'listHandoverSlots'
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\ListHandoverSlotsRequest $list_handover_slots_request (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function listHandoverSlotsRequest($list_handover_slots_request = null)
    {

        $resourcePath = '/easyShip/2022-03-23/timeSlot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($list_handover_slots_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($list_handover_slots_request));
            } else {
                $httpBody = $list_handover_slots_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateScheduledPackages
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\UpdateScheduledPackagesRequest $update_scheduled_packages_request update_scheduled_packages_request (optional)
     *
     * @return \SellingPartnerApi\Model\EasyShipV20220323\Packages
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function updateScheduledPackages($update_scheduled_packages_request = null)
    {
        $response = $this->updateScheduledPackagesWithHttpInfo($update_scheduled_packages_request);
        return $response;
    }

    /**
     * Operation updateScheduledPackagesWithHttpInfo
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\UpdateScheduledPackagesRequest $update_scheduled_packages_request (optional)
     *
     * @return array of \SellingPartnerApi\Model\EasyShipV20220323\Packages, HTTP status code, HTTP response headers (array of strings)
     * @throws \InvalidArgumentException
     * @throws \SellingPartnerApi\ApiException on non-2xx response
     */
    public function updateScheduledPackagesWithHttpInfo($update_scheduled_packages_request = null)
    {
        $request = $this->updateScheduledPackagesRequest($update_scheduled_packages_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);

            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string)($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');

                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\Packages' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\Packages', $response->getHeaders());
                case 400:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 401:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 403:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 404:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 415:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 429:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 500:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
                case 503:
                    if ('\SellingPartnerApi\Model\EasyShipV20220323\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList', $response->getHeaders());
            }

            $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Packages';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string)$responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\Packages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SellingPartnerApi\Model\EasyShipV20220323\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateScheduledPackagesAsync
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\UpdateScheduledPackagesRequest $update_scheduled_packages_request (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateScheduledPackagesAsync($update_scheduled_packages_request = null)
    {
        return $this->updateScheduledPackagesAsyncWithHttpInfo($update_scheduled_packages_request);;
    }

    /**
     * Operation updateScheduledPackagesAsyncWithHttpInfo
     *
     *
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\UpdateScheduledPackagesRequest $update_scheduled_packages_request (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @throws \InvalidArgumentException
     */
    public function updateScheduledPackagesAsyncWithHttpInfo($update_scheduled_packages_request = null)
    {
        $returnType = '\SellingPartnerApi\Model\EasyShipV20220323\Packages';
        $request = $this->updateScheduledPackagesRequest($update_scheduled_packages_request);
        $signedRequest = $this->config->signRequest(
            $request
        );



        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string)$responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string)($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateScheduledPackages'
     *
     * @param \SellingPartnerApi\Model\EasyShipV20220323\UpdateScheduledPackagesRequest $update_scheduled_packages_request (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     * @throws \InvalidArgumentException
     */
    public function updateScheduledPackagesRequest($update_scheduled_packages_request = null)
    {

        $resourcePath = '/easyShip/2022-03-23/package';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_scheduled_packages_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_scheduled_packages_request));
            } else {
                $httpBody = $update_scheduled_packages_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @return array of http client options
     * @throws \RuntimeException on file opening failure
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

}
